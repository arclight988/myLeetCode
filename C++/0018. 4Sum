class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        int n = nums.size();
        if (n < 4) return ans;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n - 3; i++) {
            if (i > 0 and nums[i] == nums[i - 1]) continue;
            if (nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target) break;
            if (nums[i] + nums[n-1] + nums[n-2] + nums[n-3] < target) continue;
            for (int j = i + 1; j < n - 2; j++) {
                if (j > i + 1 and nums[j] == nums[j - 1]) continue;
                if (nums[i] + nums[j] + nums[j+1] + nums[j+2] > target) break;
                if (nums[i] + nums[j] + nums[n-1] + nums[n-2] < target) continue;
                int left = j + 1, right = n - 1;
                while (left < right) {
                    int temp = nums[i] + nums[j] + nums[left] + nums[right];
                    if (temp == target) {
                        ans.push_back( {nums[i], nums[j], nums[left], nums[right]} );
                        while (left < right and nums[left] == nums[left + 1]) left++;
                        left++;
                        while (left < right and nums[right] == nums[right - 1]) right--;
                        right--;
                    }else if (temp < target) {
                        while (left < right and nums[left] == nums[left + 1]) left++;
                        left++;
                    }else {
                        while (left < right and nums[right] == nums[right - 1]) right--;
                        right--;
                    }
                }
            }
        }
        return ans;
    }
};
